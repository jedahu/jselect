JSelect
=======

A simple selector based templating library for client-side Javascript.



Synopsis
--------

Given this HTML:

[source,html]
--------------------------------------------------------------------------------
<div id='example'>
  The
  <animal>
    <adjective>quick</adjective> <color>brown</color> <name>toad</name>
  </animal>
  <action>hopped over</action>
  the
  <animal>
    <adjective>squirmy</adjective>
    <name>butterfly</name>
  </animal>
</div>
--------------------------------------------------------------------------------

This code:

[source,js]
--------------------------------------------------------------------------------
JSelect.fill(document.getElementById('example'),
  [['adjective', function(elem) { return elem.innerText.toUpperCase(); }],
   ['animal:first name', function(elem) { elem.outerHTML = 'fox'; }],
   ['animal:last name', 'worm'],
   ['action', function(elem) { elem.innerHTML = 'jumped over'; }]]);
--------------------------------------------------------------------------------

will produce this output:

[source,html]
--------------------------------------------------------------------------------
<div id='example'>
  The
  <animal>
    QUICK <color>brown</color> fox
  </animal>
  <action>jumped over</action>
  the
  <animal>
    SQUIRMY
    worm
  </animal>
</div>
--------------------------------------------------------------------------------

Note that replacements can be values or functions, and if functions, they can
either return a replacement value or modify their argument in-place and return
`null` or `undefined`.



API
---

JSelect exports a single global variable `JSelect` which has the following
members:

`fill`::
  `(rootNode, queryMap[, selectorFn])` +
  The main function. It applies replacements to selected children of a root
  node. It takes a root node, an ordered map from queries to replacements (an
  array of arrays of length 2), and an optional selector function.

`getSelector`::
  `(selectorFn)` +
  A function that `fill` uses to find a selector function. It takes a single
  argument which should be a selector function or `null`. If the argument is
  falsy it returns a default selector function, else it returns the argument
  unchanged.

`sizzleSelector`::
  `(rootNode, query)` +
  The default selector function if http://sizzlejs.org[Sizzle] is present.

`defaultCssSelector`::
  `(rootNode, query)` +
  The default selector function of Sizzle is not present. It uses the browserâ€™s
  `querySelectorAll` function.


=== Selector functions

Selector functions take two arguments: a root node and a query object, and
return an array of matching nodes. The returned nodes must be children of the
root node. There are no restrictions on what the query object can and cannot be;
that depends entirely on the selector function implementation.

// vim: set ft=asciidoc tw=80:
